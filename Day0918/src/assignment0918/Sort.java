package assignment0918;

import java.util.Arrays;
import java.util.List;

public class Sort {
    public static void main(String[] args) throws InterruptedException {
        Integer[] arr = {23, 85, 92, 61, 57, 0, 35, 55, 49, 59, 29, 67, 40, 43, 16, 48, 60, 11, 89, 90, 0, 79, 39, 19, 21, 8, 65, 87, 10, 77, 34, 45, 75, 32, 28, 64, 78, 63, 54, 46, 31, 50, 68, 96, 5, 80, 62, 69, 91, 22, 97, 95, 0, 74, 58, 71, 44, 87, 33, 12, 22, 95, 66, 3, 56, 73, 81, 38, 26, 70, 98, 94, 4, 72, 13, 15, 93, 24, 51, 6, 82, 41, 27, 9, 76, 52, 53, 25, 17, 36, 82, 59, 20, 18, 37, 2, 47, 30, 83, 84, 63, 7, 42, 1, 88, 14, 99, 39, 73, 26, 12, 83, 94, 26, 83, 72, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 66, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29,44};

        List list = Arrays.asList(arr);
        Long current = System.currentTimeMillis();
        Thread thread1 = new Thread() {
            @Override
            public void run() {
                List list1 = list.subList(0, list.size() / 3);
                list1.sort((o1, o2) -> {
                    return (int) o1 - (int) o2;
                });
            }
        };
        Thread thread2 = new Thread() {
            @Override
            public void run() {
                List list2 = list.subList(list.size() / 3, list.size() / 3 * 2);
                list2.sort((o1, o2) -> {
                    return (int) o1 - (int) o2;
                });
            }
        };
        Thread thread3 = new Thread() {
            @Override
            public void run() {
                List list3 = list.subList(list.size() / 3 * 2, list.size());
                list3.sort((o1, o2) -> {
                    return (int) o1 - (int) o2;
                });
            }
        };


        thread1.start();
        thread2.start();
        thread3.start();

        thread1.join();
        thread2.join();
        thread3.join();

        while (true) {
            if (!(thread1.isAlive()) && !(thread1.isAlive()) && !(thread1.isAlive())) {
                System.out.println(list);
                break;
            }
        }

        System.out.println("花费了 " + (System.currentTimeMillis() - current) + " 毫秒");

    }
}

class SingleThread {
    public static void main(String[] args) throws InterruptedException {
        Integer[] arr = {23, 85, 92, 61, 57, 0, 35, 55, 49, 59, 29, 67, 40, 43, 16, 48, 60, 11, 89, 90, 0, 79, 39, 19, 21, 8, 65, 87, 10, 77, 34, 45, 75, 32, 28, 64, 78, 63, 54, 46, 31, 50, 68, 96, 5, 80, 62, 69, 91, 22, 97, 95, 0, 74, 58, 71, 44, 87, 33, 12, 22, 95, 66, 3, 56, 73, 81, 38, 26, 70, 98, 94, 4, 72, 13, 15, 93, 24, 51, 6, 82, 41, 27, 9, 76, 52, 53, 25, 17, 36, 82, 59, 20, 18, 37, 2, 47, 30, 83, 84, 63, 7, 42, 1, 88, 14, 99, 39, 73, 26, 12, 83, 94, 26, 83, 72, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 66, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29, 26, 91, 72, 13, 39, 63, 14, 91, 27, 69, 12, 33, 46, 23, 57, 75, 90, 61, 38, 29, 66, 71, 13, 39, 26, 72, 91, 62, 23, 71, 39, 29};

        List list = Arrays.asList(arr);
        Long current = System.currentTimeMillis();

                List list1 = list.subList(0, list.size() / 3);
                list1.sort((o1, o2) -> {
                    return (int) o1 - (int) o2;
                });

                List list2 = list.subList(list.size() / 3, list.size() / 3 * 2);
                list2.sort((o1, o2) -> {
                    return (int) o1 - (int) o2;
                });

                List list3 = list.subList(list.size() / 3 * 2, list.size());
                list3.sort((o1, o2) -> {
                    return (int) o1 - (int) o2;
                });





        System.out.println(list);
        System.out.println("花费了 " + ((long) System.currentTimeMillis() - current) + " 毫秒");
    }
}
